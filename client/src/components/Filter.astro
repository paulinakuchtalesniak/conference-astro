---
import fetchApi from "../lib/strapi";
const { speakers } = Astro.props;
const tags = await fetchApi({
  endpoint: "tags",
  wrappedByKey: "data",
});
const days = await fetchApi({
  endpoint: "days",
  wrappedByKey: "data",
});

const dates = days.map((day) => day.attributes.date);
const locations = speakers.map(
  (speaker) => speaker.attributes.location.data.attributes.name
);
const uniqueLocations = [];
locations.forEach((location) => {
  if (!uniqueLocations.includes(location)) {
    uniqueLocations.push(location);
  }
});
---

<style>
  .date-tab {
    padding: 10px;
    margin-right: 5px;
    cursor: pointer;
    border: none;
    background-color: #f0f0f0;
  }

  .date-tab.active {
    background-color: #ddd;
  }
  .speakers__card.hidden {
    display: none;
  }
</style>
<script>
  console.log(
    document
      .querySelector(".speakers__card-lineup")
      .getAttribute("data-location")
  );
  const filterState = {
    tag: null,
    date: "",
    locations: [],
  };
  const setupDateTabs = () => {
    const tabs = document.querySelectorAll(".date-tab");
    tabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        tabs.forEach((t) => t.classList.remove("active"));
        tab.classList.add("active");

        filterState.date = tab.getAttribute("data-date");
        applyFilters();
      });
    });
  };
  document.querySelectorAll('input[name="locations"]').forEach((checkbox) => {
    checkbox.addEventListener("change", (event) => {
      const value = event.target.value;
      const checked = event.target.checked;
      console.log(value, checked);

      if (checked) {
        filterState.locations.push(value);
      } else {
        filterState.locations = filterState.locations.filter(
          (loc) => loc !== value
        );
      }

      applyFilters();
    });
  });

  const applyFilters = () => {
    const speakers = document.querySelectorAll(".speakers__card-lineup");

    speakers.forEach((speaker) => {
      const speakerDate = speaker.getAttribute("data-date-speaker");
      const speakerLocation = speaker.getAttribute("data-location");
      const matchesDate =
        filterState.date === "" || filterState.date === speakerDate;
      const matchesLocation =
        filterState.locations.length === 0 ||
        filterState.locations.includes(speakerLocation);

      if (matchesDate && matchesLocation) {
        speaker.classList.remove("hidden");
      } else {
        speaker.classList.add("hidden");
      }
    });
  };

  setupDateTabs();
  applyFilters();
</script>

<div>
  <div class="date-tabs">
    <button class="date-tab active" data-date="">All Dates</button>
    {
      dates.map((date, index) => (
        <button class="date-tab" data-date={date} id={`date-tab-${index}`}>
          {date}
        </button>
      ))
    }
  </div>

  {
    uniqueLocations.map((location, index) => (
      <div>
        <input
          type="checkbox"
          id={`location-${index}`}
          name="locations"
          value={location}
        />
        <label for={`location-${index}`}>{location}</label>
      </div>
    ))
  }
</div>
